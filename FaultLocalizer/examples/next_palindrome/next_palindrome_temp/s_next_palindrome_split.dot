digraph clusternext_palindrome {
	graph [bb="0,0,791.96,897.31",
		label=next_palindrome,
		lheight=0.22,
		lp="395.98,11.875",
		lwidth=1.29
	];
	node [label="\N"];
	1	[height=1.3946,
		label="c[7] += 1
n = len(digit_list)
mid = n // 2
if n % 2 == 0:
",
		pos="373.47,847.11",
		width=2.1704];
	2	[height=1.3946,
		label="c[1] += 1
left_side = digit_list[:mid]
left_side_reverse = left_side[::-1]
candidate = left_side + left_side_reverse
",
		pos="171.47,683.81",
		width=4.7631];
	1 -> 2	[label="n % 2 == 0",
		lp="317.35,771.03",
		pos="e,229.76,731.35 324.83,807.27 299.02,786.66 266.91,761.02 238.75,738.53"];
	4	[height=1.7039,
		label="c[2] += 1
left_side = digit_list[:mid]
middle = digit_list[mid]
left_side_reverse = left_side[::-1]
candidate = left_side + [middle] + \
left_side_reverse
",
		pos="576.47,683.81",
		width=5.9859];
	1 -> 4	[label="(n % 2 != 0)",
		lp="508.97,771.03",
		pos="e,504.41,742.07 422.1,807.47 444.13,789.97 470.78,768.79 495.69,749"];
	3	[height=0.5,
		label="if candidate > digit_list:
",
		pos="373.47,567.47",
		width=2.7075];
	2 -> 3	[pos="e,344.38,584.94 249.28,638.77 278.46,622.25 310.36,604.19 334.53,590.52"];
	5	[height=0.77585,
		label="c[3] += 1
return candidate
",
		pos="304.47,469.79",
		width=2.0673];
	3 -> 5	[label="candidate > digit_list",
		lp="398.6,523.59",
		pos="e,318.53,497.61 355.74,549.36 350.47,543.88 344.87,537.63 340.22,531.47 334.57,523.97 329.09,515.52 324.19,507.35"];
	6	[height=0.5,
		label="for i in range(mid - 1, -1, -1):
",
		pos="513.47,469.79",
		width=3.2481];
	3 -> 6	[label="(candidate <= digit_list)",
		lp="540.22,523.59",
		pos="e,500.54,488.1 419.2,551.19 431.84,545.92 445.18,539.33 456.47,531.47 470.28,521.87 483.31,508.46 493.42,496.69"];
	8	[height=0.77585,
		label="c[4] += 1
if digit_list[i] < 9:
",
		pos="296.47,362.18",
		width=2.1999];
	6 -> 8	[label="range(mid - 1, -1, -1)",
		lp="451.6,415.98",
		pos="e,331.32,387.44 464.55,453.04 442.34,445.25 416,435.11 393.22,423.86 375.39,415.05 356.68,403.83 340.51,393.43"];
	9	[height=0.5,
		label="return [1] + [0] * (n - 1) + [1]
",
		pos="513.47,362.18",
		width=3.3174];
	6 -> 9	[pos="e,513.47,380.64 513.47,451.35 513.47,435.22 513.47,410.95 513.47,391.95"];
	10	[height=1.0852,
		label="c[5] += 1
digit_list[i] += 1
if i != n - i - 1:
",
		pos="296.47,243.43",
		width=2.082];
	8 -> 10	[label="digit_list[i] < 9",
		lp="337.35,308.37",
		pos="e,296.47,282.68 296.47,333.81 296.47,321.91 296.47,307.58 296.47,293.93"];
	11	[height=0.77585,
		label="digit_list[i] = 0
digit_list[n - i - 1] = 0
",
		pos="536.47,243.43",
		width=2.6566];
	8 -> 11	[label="(digit_list[i] >= 9)",
		lp="465.97,308.37",
		pos="e,488.05,267.98 342.18,338.94 380.67,320.22 435.98,293.32 477.74,273"];
	12	[height=0.77585,
		label="c[6] += 1
digit_list[n - i - 1] = digit_list[i]
",
		pos="212.47,124.68",
		width=3.6878];
	10 -> 12	[label="i != n - i - 1",
		lp="286.35,178.49",
		pos="e,231.74,152.46 270.59,206.45 260.3,192.16 248.5,175.76 238.24,161.49"];
	13	[height=0.5,
		label="return digit_list[:mid] + [digit_list[mid]] * (n % 2) + digit_list[mid - 1::-1]
",
		pos="296.47,41.75",
		width=7.7529];
	10 -> 13	[label="(i == n - i - 1)",
		lp="399.72,124.68",
		pos="e,323.22,59.931 325.92,207.22 337.18,191.53 348.7,172.2 354.47,152.61 361.49,128.8 364.38,119.51 354.47,96.75 349.56,85.47 341.01,\
75.481 331.95,67.258"];
	12 -> 13	[pos="e,278.44,60.124 239.98,97.181 249.75,87.768 260.71,77.206 270.36,67.908"];
	11 -> 6	[pos="e,561.35,453 579.88,268.78 602.79,284.25 628.73,306.57 641.47,334.25 651.86,356.8 653.59,368.44 641.47,390.11 626.41,417.04 597.94,\
435.88 571.67,448.36"];
	4 -> 3	[pos="e,402.97,585.08 480.03,628.49 456.27,615.1 432.14,601.51 412.86,590.66"];
}
